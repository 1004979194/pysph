from libc.math cimport *
import numpy as np

<?py
from pysph.base.cython_generator import CythonGenerator
from pysph.base.kernels import (CubicSpline, WendlandQuintic, Gaussian,
    QuinticSpline)
code = '''
cdef class {cls}Wrapper:
    """Reasonably high-performance convenience wrapper for Kernels.
    """

    cdef public {cls} kern
    cdef double[3] xij, grad
    cdef public double radius_scale

    def __init__(self, kern):
        self.kern = kern
        self.radius_scale = kern.radius_scale

    cpdef double kernel(self, double xi, double yi, double zi, double xj, double yj, double zj, double h):
        cdef double* xij = self.xij
        xij[0] = xi-xj
        xij[1] = yi-yj
        xij[2] = zi-zj
        cdef double rij = sqrt(xij[0]*xij[0] + xij[1]*xij[1] +xij[2]*xij[2])
        return self.kern.kernel(xij, rij, h)

    cpdef gradient(self, double xi, double yi, double zi, double xj, double yj, double zj, double h):
        cdef double* xij = self.xij
        xij[0] = xi-xj
        xij[1] = yi-yj
        xij[2] = zi-zj
        cdef double rij = sqrt(xij[0]*xij[0] + xij[1]*xij[1] +xij[2]*xij[2])
        cdef double* grad = self.grad
        self.kern.gradient(xij, rij, h, grad)
        return grad[0], grad[1], grad[2]
'''

g = CythonGenerator(python_methods=True)
for cls in (CubicSpline, WendlandQuintic, Gaussian, QuinticSpline):
    k = cls()
    g.parse(k)
    out.write('\n' + '#'*75)
    out.write(g.get_code())
    name = cls.__name__
    out.write(code.format(cls=name))
?>
