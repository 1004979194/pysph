Installation and getting started
=================================

To install PySPH, you need a working Python environment. We recommend
`Enthought Canopy`_ if you are new to Python or any other Python distribution
of your choice.


Core dependencies
------------------

The core dependencies are:

  - NumPy_
  - nose_ for running the unit tests
  - Cython_ (ideally version 0.19 and above)
  - Mako_

Cython and Mako can be installed from the command line using::

    $ easy_install Cython mako


.. _NumPy: http://numpy.scipy.org
.. _Enthought Canopy: https://www.enthought.com/products/canopy/
.. _Cython: http://www.cython.org
.. _nose: https://pypi.python.org/pypi/nose
.. _Mako: https://pypi.python.org/pypi/Mako

Optional dependencies
-----------------------

PySPH provides a convenient viewer to view the output of results.  This viewer
is called ``pysph_viewer`` and requires Mayavi_ to be installed.  Since this
is only a viewer it is optional for use, however, it is highly recommended
that you have Mayavi installed.

If you want to use PySPH in parallel, you will need mpi4py_ and the Zoltan_
data management library.

.. _Mayavi: http://code.enthought.com/projects/mayavi
.. _mpi4py: http://mpi4py.scipy.org/
.. _Zoltan: http://www.cs.sandia.gov/zoltan/


Building and linking PyZoltan
-------------------------------

 1. Build Zoltan with the following compile options::

    $ ../configure --with-cflags=-fPIC --enable-mpi -with-mpi-incdir=/usr/include/openmpi-x86_64 --with-mpi-libdir=/usr/lib64/openmpi/lib --prefix=/home/<username>/usr/local/Zoltan --with-mpi-compilers=/usr/lib64/openmpi/bin/

 Of course, you have to provide the appropriate MPI directories on your system.

 2. Declare the environment variables ``ZOLTAN_INCLUDE`` and ``ZOLTAN_LIBRARY``.

 3. Install PySPH. The PyZoltan wrappers will be compiled and available.

If you wish to see a working and complete  build/test script please see the
`continous build script <https://drone.io/bitbucket.org/pysph/pysph/admin>`_
hosted at `Drone.io <http://drone.io>`_.


Getting PySPH
--------------

The best way to currently get PySPH is via git_::

   $ git clone https://bitbucket.org/pysph/pysph.git

If you do not have git or do not wish to bother with it (a bad idea), you can
get a ZIP or tarball from the `pysph site
<https://bitbucket.org/pysph/pysph>`_. You can unzip/untar this and use the
sources.


.. _git: http://git-scm.com/


Building and Installing PySPH
-------------------------------

Once you have the dependencies installed you can install PySPH with::

    $ python setup.py install

You could also do::

    $ python setup.py develop

This is useful if you are tracking the latest version of PySPH via git.


Running the tests
------------------

To test PySPH from the source distribution you can do::

   $ nosetests -A"slow==False"

This should run all the tests.



Running the examples
---------------------

You can verify the installation by exploring some examples::

    $ cd examples
    $ python elliptical_drop.py

Try this::

    $ python elliptical_drop.py -h

to see the different options supported by each example.  You can view the data
generated by the simulation (after the simulation is complete or during the
simulation) by running the ``pysph_viewer`` application.  To view the
simulated data you may do::

    $ pysph_viewer cavity_output/*.npz

If you have Mayavi_ installed this should show a UI that looks like:

.. image:: ../Images/pysph_viewer.png
    :width: 800px
    :alt: PySPH viewer

There are other examples like those in the ``TransportVelocity`` directory::

    $ cd TransportVelocity
    $ python cavity.py

This runs the driven cavity problem using the transport velocity formulation
of Adami et al. You can verify the results for this problem using the helper
script ``examples/TransportVelocity/ldcavity_results.py`` to plot, for example
the streamlines:

.. image:: ../Images/ldc-streamlines.png

If you want to use PySPH for elastic dynamics, you can try some of the
examples from Gray et al., Comput. Methods Appl. Mech. Engrg. 190
(2001), 6641-6662::

    $ cd examples/solid_mech
    $ python rings.py

Which runs the problem of the collision of two elastic rings:

.. image:: ../Images/rings-collision.png

The auto-generated code for the example resides in the directory
``~/.pysph/source``. A note of caution however, it's not for the faint hearted.

Organization of the ``pysph`` package
--------------------------------------

PySPH is organized into several sub-packages.  These are:

  - ``pysph.base``:  This subpackage defines the
    :py:class:`pysph.base.particle_array.ParticleArray`,
    :py:class:`pysph.base.carray.CArray` (which are used by the particle
    arrays), the various :doc:`reference/kernels`, the nearest neighbor
    particle search (NNPS) code, and the Cython code generation utilities.

  - ``pysph.sph``: Contains the various :doc:`reference/equations`, the
    :doc:`reference/integrator` and associated integration steppers, and the
    code generation for the SPH looping. ``pysph.sph.wc`` contains the
    equations for the weakly compressible formulation.
    ``pysph.sph.solid_mech`` contains the equations for solid mechanics and
    ``pysph.sph.misc`` has miscellaneous equations.

  - ``pysph.solver``: Provides the :py:class:`pysph.solver.solver.Solver`, the
    :py:class:`pysph.solver.application.Application` and a convenient way to
    interact with the solver as it is running.

  - ``pysph.parallel``: Provides the parallel functionality.

  - ``pysph.tools``: Provides some useful tools including the ``pysph_viewer``
    which is based on Mayavi_.
